// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_rpc_2eproto__INCLUDED
#define PROTOBUF_rpc_2eproto__INCLUDED
#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable: 4127 4244 4267 4996)
#endif
#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_2eproto();
void protobuf_AssignDesc_rpc_2eproto();
void protobuf_ShutdownFile_rpc_2eproto();

class TransferMessage;
class Request;
class Response;
class ServiceInfo;
class EvtBroadcastServiceList;
class ServiceList;
class EvtClientActive;
class EvtActiveTest;
class Login;
class LoginRsp;

enum TransferMessage_Command {
  TransferMessage_Command_Request = 1,
  TransferMessage_Command_Response = 2,
  TransferMessage_Command_EvtClientActive = 3,
  TransferMessage_Command_EvtBroadcastServiceList = 4,
  TransferMessage_Command_EvtActiveTest = 5,
  TransferMessage_Command_Login = 6,
  TransferMessage_Command_LoginRsp = 7
};
bool TransferMessage_Command_IsValid(int value);
const TransferMessage_Command TransferMessage_Command_Command_MIN = TransferMessage_Command_Request;
const TransferMessage_Command TransferMessage_Command_Command_MAX = TransferMessage_Command_LoginRsp;
const int TransferMessage_Command_Command_ARRAYSIZE = TransferMessage_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransferMessage_Command_descriptor();
inline const ::std::string& TransferMessage_Command_Name(TransferMessage_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransferMessage_Command_descriptor(), value);
}
inline bool TransferMessage_Command_Parse(
    const ::std::string& name, TransferMessage_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransferMessage_Command>(
    TransferMessage_Command_descriptor(), name, value);
}
// ===================================================================

class TransferMessage : public ::google::protobuf::Message {
 public:
  TransferMessage();
  virtual ~TransferMessage();

  TransferMessage(const TransferMessage& from);

  inline TransferMessage& operator=(const TransferMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferMessage& default_instance();

  void Swap(TransferMessage* other);

  // implements Message ----------------------------------------------

  TransferMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferMessage& from);
  void MergeFrom(const TransferMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TransferMessage_Command Command;
  static const Command Request = TransferMessage_Command_Request;
  static const Command Response = TransferMessage_Command_Response;
  static const Command EvtClientActive = TransferMessage_Command_EvtClientActive;
  static const Command EvtBroadcastServiceList = TransferMessage_Command_EvtBroadcastServiceList;
  static const Command EvtActiveTest = TransferMessage_Command_EvtActiveTest;
  static const Command Login = TransferMessage_Command_Login;
  static const Command LoginRsp = TransferMessage_Command_LoginRsp;
  static inline bool Command_IsValid(int value) {
    return TransferMessage_Command_IsValid(value);
  }
  static const Command Command_MIN =
    TransferMessage_Command_Command_MIN;
  static const Command Command_MAX =
    TransferMessage_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    TransferMessage_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return TransferMessage_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return TransferMessage_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return TransferMessage_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .rpc.TransferMessage.Command command = 1 [default = Request];
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline ::rpc::TransferMessage_Command command() const;
  inline void set_command(::rpc::TransferMessage_Command value);

  // optional bytes message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:rpc.TransferMessage)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  int command_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static TransferMessage* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string serviceName = 2;
  inline bool has_servicename() const;
  inline void clear_servicename();
  static const int kServiceNameFieldNumber = 2;
  inline const ::std::string& servicename() const;
  inline void set_servicename(const ::std::string& value);
  inline void set_servicename(const char* value);
  inline void set_servicename(const char* value, size_t size);
  inline ::std::string* mutable_servicename();
  inline ::std::string* release_servicename();
  inline void set_allocated_servicename(::std::string* servicename);

  // required string methodName = 3;
  inline bool has_methodname() const;
  inline void clear_methodname();
  static const int kMethodNameFieldNumber = 3;
  inline const ::std::string& methodname() const;
  inline void set_methodname(const ::std::string& value);
  inline void set_methodname(const char* value);
  inline void set_methodname(const char* value, size_t size);
  inline ::std::string* mutable_methodname();
  inline ::std::string* release_methodname();
  inline void set_allocated_methodname(::std::string* methodname);

  // optional bool blockingService = 4;
  inline bool has_blockingservice() const;
  inline void clear_blockingservice();
  static const int kBlockingServiceFieldNumber = 4;
  inline bool blockingservice() const;
  inline void set_blockingservice(bool value);

  // optional bytes message = 5;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 5;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:rpc.Request)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_servicename();
  inline void clear_has_servicename();
  inline void set_has_methodname();
  inline void clear_has_methodname();
  inline void set_has_blockingservice();
  inline void clear_has_blockingservice();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* servicename_;
  ::google::protobuf::int32 id_;
  bool blockingservice_;
  ::std::string* methodname_;
  ::std::string* message_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 errorCode = 2;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 2;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // optional bytes message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional string errorMessage = 4;
  inline bool has_errormessage() const;
  inline void clear_errormessage();
  static const int kErrorMessageFieldNumber = 4;
  inline const ::std::string& errormessage() const;
  inline void set_errormessage(const ::std::string& value);
  inline void set_errormessage(const char* value);
  inline void set_errormessage(const char* value, size_t size);
  inline ::std::string* mutable_errormessage();
  inline ::std::string* release_errormessage();
  inline void set_allocated_errormessage(::std::string* errormessage);

  // @@protoc_insertion_point(class_scope:rpc.Response)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_errormessage();
  inline void clear_has_errormessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 errorcode_;
  ::std::string* message_;
  ::std::string* errormessage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class ServiceInfo : public ::google::protobuf::Message {
 public:
  ServiceInfo();
  virtual ~ServiceInfo();

  ServiceInfo(const ServiceInfo& from);

  inline ServiceInfo& operator=(const ServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceInfo& default_instance();

  void Swap(ServiceInfo* other);

  // implements Message ----------------------------------------------

  ServiceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceInfo& from);
  void MergeFrom(const ServiceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string serviceName = 1;
  inline bool has_servicename() const;
  inline void clear_servicename();
  static const int kServiceNameFieldNumber = 1;
  inline const ::std::string& servicename() const;
  inline void set_servicename(const ::std::string& value);
  inline void set_servicename(const char* value);
  inline void set_servicename(const char* value, size_t size);
  inline ::std::string* mutable_servicename();
  inline ::std::string* release_servicename();
  inline void set_allocated_servicename(::std::string* servicename);

  // required string methodName = 2;
  inline bool has_methodname() const;
  inline void clear_methodname();
  static const int kMethodNameFieldNumber = 2;
  inline const ::std::string& methodname() const;
  inline void set_methodname(const ::std::string& value);
  inline void set_methodname(const char* value);
  inline void set_methodname(const char* value, size_t size);
  inline ::std::string* mutable_methodname();
  inline ::std::string* release_methodname();
  inline void set_allocated_methodname(::std::string* methodname);

  // @@protoc_insertion_point(class_scope:rpc.ServiceInfo)
 private:
  inline void set_has_servicename();
  inline void clear_has_servicename();
  inline void set_has_methodname();
  inline void clear_has_methodname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* servicename_;
  ::std::string* methodname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static ServiceInfo* default_instance_;
};
// -------------------------------------------------------------------

class EvtBroadcastServiceList : public ::google::protobuf::Message {
 public:
  EvtBroadcastServiceList();
  virtual ~EvtBroadcastServiceList();

  EvtBroadcastServiceList(const EvtBroadcastServiceList& from);

  inline EvtBroadcastServiceList& operator=(const EvtBroadcastServiceList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EvtBroadcastServiceList& default_instance();

  void Swap(EvtBroadcastServiceList* other);

  // implements Message ----------------------------------------------

  EvtBroadcastServiceList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EvtBroadcastServiceList& from);
  void MergeFrom(const EvtBroadcastServiceList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rpc.ServiceInfo service = 1;
  inline int service_size() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 1;
  inline const ::rpc::ServiceInfo& service(int index) const;
  inline ::rpc::ServiceInfo* mutable_service(int index);
  inline ::rpc::ServiceInfo* add_service();
  inline const ::google::protobuf::RepeatedPtrField< ::rpc::ServiceInfo >&
      service() const;
  inline ::google::protobuf::RepeatedPtrField< ::rpc::ServiceInfo >*
      mutable_service();

  // @@protoc_insertion_point(class_scope:rpc.EvtBroadcastServiceList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rpc::ServiceInfo > service_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static EvtBroadcastServiceList* default_instance_;
};
// -------------------------------------------------------------------

class ServiceList : public ::google::protobuf::Message {
 public:
  ServiceList();
  virtual ~ServiceList();

  ServiceList(const ServiceList& from);

  inline ServiceList& operator=(const ServiceList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceList& default_instance();

  void Swap(ServiceList* other);

  // implements Message ----------------------------------------------

  ServiceList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceList& from);
  void MergeFrom(const ServiceList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rpc.ServiceInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::rpc::ServiceInfo& list(int index) const;
  inline ::rpc::ServiceInfo* mutable_list(int index);
  inline ::rpc::ServiceInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::rpc::ServiceInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::rpc::ServiceInfo >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:rpc.ServiceList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rpc::ServiceInfo > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static ServiceList* default_instance_;
};
// -------------------------------------------------------------------

class EvtClientActive : public ::google::protobuf::Message {
 public:
  EvtClientActive();
  virtual ~EvtClientActive();

  EvtClientActive(const EvtClientActive& from);

  inline EvtClientActive& operator=(const EvtClientActive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EvtClientActive& default_instance();

  void Swap(EvtClientActive* other);

  // implements Message ----------------------------------------------

  EvtClientActive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EvtClientActive& from);
  void MergeFrom(const EvtClientActive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 channelId = 1;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::int32 channelid() const;
  inline void set_channelid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.EvtClientActive)
 private:
  inline void set_has_channelid();
  inline void clear_has_channelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 channelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static EvtClientActive* default_instance_;
};
// -------------------------------------------------------------------

class EvtActiveTest : public ::google::protobuf::Message {
 public:
  EvtActiveTest();
  virtual ~EvtActiveTest();

  EvtActiveTest(const EvtActiveTest& from);

  inline EvtActiveTest& operator=(const EvtActiveTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EvtActiveTest& default_instance();

  void Swap(EvtActiveTest* other);

  // implements Message ----------------------------------------------

  EvtActiveTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EvtActiveTest& from);
  void MergeFrom(const EvtActiveTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:rpc.EvtActiveTest)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static EvtActiveTest* default_instance_;
};
// -------------------------------------------------------------------

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:rpc.Login)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class LoginRsp : public ::google::protobuf::Message {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRsp& default_instance();

  void Swap(LoginRsp* other);

  // implements Message ----------------------------------------------

  LoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  inline void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:rpc.LoginRsp)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static LoginRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TransferMessage

// required .rpc.TransferMessage.Command command = 1 [default = Request];
inline bool TransferMessage::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferMessage::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferMessage::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferMessage::clear_command() {
  command_ = 1;
  clear_has_command();
}
inline ::rpc::TransferMessage_Command TransferMessage::command() const {
  return static_cast< ::rpc::TransferMessage_Command >(command_);
}
inline void TransferMessage::set_command(::rpc::TransferMessage_Command value) {
  assert(::rpc::TransferMessage_Command_IsValid(value));
  set_has_command();
  command_ = value;
}

// optional bytes message = 2;
inline bool TransferMessage::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransferMessage::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransferMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransferMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& TransferMessage::message() const {
  return *message_;
}
inline void TransferMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void TransferMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void TransferMessage::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransferMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* TransferMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TransferMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Request

// required int32 id = 1;
inline bool Request::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Request::id() const {
  return id_;
}
inline void Request::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string serviceName = 2;
inline bool Request::has_servicename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_servicename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_servicename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_servicename() {
  if (servicename_ != &::google::protobuf::internal::kEmptyString) {
    servicename_->clear();
  }
  clear_has_servicename();
}
inline const ::std::string& Request::servicename() const {
  return *servicename_;
}
inline void Request::set_servicename(const ::std::string& value) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::kEmptyString) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(value);
}
inline void Request::set_servicename(const char* value) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::kEmptyString) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(value);
}
inline void Request::set_servicename(const char* value, size_t size) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::kEmptyString) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_servicename() {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::kEmptyString) {
    servicename_ = new ::std::string;
  }
  return servicename_;
}
inline ::std::string* Request::release_servicename() {
  clear_has_servicename();
  if (servicename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servicename_;
    servicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_servicename(::std::string* servicename) {
  if (servicename_ != &::google::protobuf::internal::kEmptyString) {
    delete servicename_;
  }
  if (servicename) {
    set_has_servicename();
    servicename_ = servicename;
  } else {
    clear_has_servicename();
    servicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string methodName = 3;
inline bool Request::has_methodname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_methodname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_methodname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_methodname() {
  if (methodname_ != &::google::protobuf::internal::kEmptyString) {
    methodname_->clear();
  }
  clear_has_methodname();
}
inline const ::std::string& Request::methodname() const {
  return *methodname_;
}
inline void Request::set_methodname(const ::std::string& value) {
  set_has_methodname();
  if (methodname_ == &::google::protobuf::internal::kEmptyString) {
    methodname_ = new ::std::string;
  }
  methodname_->assign(value);
}
inline void Request::set_methodname(const char* value) {
  set_has_methodname();
  if (methodname_ == &::google::protobuf::internal::kEmptyString) {
    methodname_ = new ::std::string;
  }
  methodname_->assign(value);
}
inline void Request::set_methodname(const char* value, size_t size) {
  set_has_methodname();
  if (methodname_ == &::google::protobuf::internal::kEmptyString) {
    methodname_ = new ::std::string;
  }
  methodname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_methodname() {
  set_has_methodname();
  if (methodname_ == &::google::protobuf::internal::kEmptyString) {
    methodname_ = new ::std::string;
  }
  return methodname_;
}
inline ::std::string* Request::release_methodname() {
  clear_has_methodname();
  if (methodname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = methodname_;
    methodname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_methodname(::std::string* methodname) {
  if (methodname_ != &::google::protobuf::internal::kEmptyString) {
    delete methodname_;
  }
  if (methodname) {
    set_has_methodname();
    methodname_ = methodname;
  } else {
    clear_has_methodname();
    methodname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool blockingService = 4;
inline bool Request::has_blockingservice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_blockingservice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_blockingservice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_blockingservice() {
  blockingservice_ = false;
  clear_has_blockingservice();
}
inline bool Request::blockingservice() const {
  return blockingservice_;
}
inline void Request::set_blockingservice(bool value) {
  set_has_blockingservice();
  blockingservice_ = value;
}

// optional bytes message = 5;
inline bool Request::has_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_message() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_message() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Request::message() const {
  return *message_;
}
inline void Request::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Request::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Request::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* Request::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Response

// required int32 id = 1;
inline bool Response::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Response::id() const {
  return id_;
}
inline void Response::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 errorCode = 2;
inline bool Response::has_errorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_errorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 Response::errorcode() const {
  return errorcode_;
}
inline void Response::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional bytes message = 3;
inline bool Response::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Response::message() const {
  return *message_;
}
inline void Response::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Response::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Response::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* Response::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string errorMessage = 4;
inline bool Response::has_errormessage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_errormessage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_errormessage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_errormessage() {
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    errormessage_->clear();
  }
  clear_has_errormessage();
}
inline const ::std::string& Response::errormessage() const {
  return *errormessage_;
}
inline void Response::set_errormessage(const ::std::string& value) {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::kEmptyString) {
    errormessage_ = new ::std::string;
  }
  errormessage_->assign(value);
}
inline void Response::set_errormessage(const char* value) {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::kEmptyString) {
    errormessage_ = new ::std::string;
  }
  errormessage_->assign(value);
}
inline void Response::set_errormessage(const char* value, size_t size) {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::kEmptyString) {
    errormessage_ = new ::std::string;
  }
  errormessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_errormessage() {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::kEmptyString) {
    errormessage_ = new ::std::string;
  }
  return errormessage_;
}
inline ::std::string* Response::release_errormessage() {
  clear_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormessage_;
    errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response::set_allocated_errormessage(::std::string* errormessage) {
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errormessage_;
  }
  if (errormessage) {
    set_has_errormessage();
    errormessage_ = errormessage;
  } else {
    clear_has_errormessage();
    errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ServiceInfo

// required string serviceName = 1;
inline bool ServiceInfo::has_servicename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceInfo::set_has_servicename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceInfo::clear_has_servicename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceInfo::clear_servicename() {
  if (servicename_ != &::google::protobuf::internal::kEmptyString) {
    servicename_->clear();
  }
  clear_has_servicename();
}
inline const ::std::string& ServiceInfo::servicename() const {
  return *servicename_;
}
inline void ServiceInfo::set_servicename(const ::std::string& value) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::kEmptyString) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(value);
}
inline void ServiceInfo::set_servicename(const char* value) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::kEmptyString) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(value);
}
inline void ServiceInfo::set_servicename(const char* value, size_t size) {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::kEmptyString) {
    servicename_ = new ::std::string;
  }
  servicename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceInfo::mutable_servicename() {
  set_has_servicename();
  if (servicename_ == &::google::protobuf::internal::kEmptyString) {
    servicename_ = new ::std::string;
  }
  return servicename_;
}
inline ::std::string* ServiceInfo::release_servicename() {
  clear_has_servicename();
  if (servicename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servicename_;
    servicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServiceInfo::set_allocated_servicename(::std::string* servicename) {
  if (servicename_ != &::google::protobuf::internal::kEmptyString) {
    delete servicename_;
  }
  if (servicename) {
    set_has_servicename();
    servicename_ = servicename;
  } else {
    clear_has_servicename();
    servicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string methodName = 2;
inline bool ServiceInfo::has_methodname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceInfo::set_has_methodname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceInfo::clear_has_methodname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceInfo::clear_methodname() {
  if (methodname_ != &::google::protobuf::internal::kEmptyString) {
    methodname_->clear();
  }
  clear_has_methodname();
}
inline const ::std::string& ServiceInfo::methodname() const {
  return *methodname_;
}
inline void ServiceInfo::set_methodname(const ::std::string& value) {
  set_has_methodname();
  if (methodname_ == &::google::protobuf::internal::kEmptyString) {
    methodname_ = new ::std::string;
  }
  methodname_->assign(value);
}
inline void ServiceInfo::set_methodname(const char* value) {
  set_has_methodname();
  if (methodname_ == &::google::protobuf::internal::kEmptyString) {
    methodname_ = new ::std::string;
  }
  methodname_->assign(value);
}
inline void ServiceInfo::set_methodname(const char* value, size_t size) {
  set_has_methodname();
  if (methodname_ == &::google::protobuf::internal::kEmptyString) {
    methodname_ = new ::std::string;
  }
  methodname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceInfo::mutable_methodname() {
  set_has_methodname();
  if (methodname_ == &::google::protobuf::internal::kEmptyString) {
    methodname_ = new ::std::string;
  }
  return methodname_;
}
inline ::std::string* ServiceInfo::release_methodname() {
  clear_has_methodname();
  if (methodname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = methodname_;
    methodname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServiceInfo::set_allocated_methodname(::std::string* methodname) {
  if (methodname_ != &::google::protobuf::internal::kEmptyString) {
    delete methodname_;
  }
  if (methodname) {
    set_has_methodname();
    methodname_ = methodname;
  } else {
    clear_has_methodname();
    methodname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// EvtBroadcastServiceList

// repeated .rpc.ServiceInfo service = 1;
inline int EvtBroadcastServiceList::service_size() const {
  return service_.size();
}
inline void EvtBroadcastServiceList::clear_service() {
  service_.Clear();
}
inline const ::rpc::ServiceInfo& EvtBroadcastServiceList::service(int index) const {
  return service_.Get(index);
}
inline ::rpc::ServiceInfo* EvtBroadcastServiceList::mutable_service(int index) {
  return service_.Mutable(index);
}
inline ::rpc::ServiceInfo* EvtBroadcastServiceList::add_service() {
  return service_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::ServiceInfo >&
EvtBroadcastServiceList::service() const {
  return service_;
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::ServiceInfo >*
EvtBroadcastServiceList::mutable_service() {
  return &service_;
}

// -------------------------------------------------------------------

// ServiceList

// repeated .rpc.ServiceInfo list = 1;
inline int ServiceList::list_size() const {
  return list_.size();
}
inline void ServiceList::clear_list() {
  list_.Clear();
}
inline const ::rpc::ServiceInfo& ServiceList::list(int index) const {
  return list_.Get(index);
}
inline ::rpc::ServiceInfo* ServiceList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::rpc::ServiceInfo* ServiceList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::ServiceInfo >&
ServiceList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::ServiceInfo >*
ServiceList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// EvtClientActive

// required int32 channelId = 1;
inline bool EvtClientActive::has_channelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EvtClientActive::set_has_channelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EvtClientActive::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EvtClientActive::clear_channelid() {
  channelid_ = 0;
  clear_has_channelid();
}
inline ::google::protobuf::int32 EvtClientActive::channelid() const {
  return channelid_;
}
inline void EvtClientActive::set_channelid(::google::protobuf::int32 value) {
  set_has_channelid();
  channelid_ = value;
}

// -------------------------------------------------------------------

// EvtActiveTest

// optional string message = 1;
inline bool EvtActiveTest::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EvtActiveTest::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EvtActiveTest::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EvtActiveTest::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& EvtActiveTest::message() const {
  return *message_;
}
inline void EvtActiveTest::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void EvtActiveTest::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void EvtActiveTest::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EvtActiveTest::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* EvtActiveTest::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EvtActiveTest::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Login

// required string userName = 1;
inline bool Login::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& Login::username() const {
  return *username_;
}
inline void Login::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Login::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Login::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* Login::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool Login::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Login::password() const {
  return *password_;
}
inline void Login::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Login::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Login::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Login::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Login::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginRsp

// required string status = 1;
inline bool LoginRsp::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRsp::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRsp::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRsp::clear_status() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    status_->clear();
  }
  clear_has_status();
}
inline const ::std::string& LoginRsp::status() const {
  return *status_;
}
inline void LoginRsp::set_status(const ::std::string& value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void LoginRsp::set_status(const char* value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void LoginRsp::set_status(const char* value, size_t size) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRsp::mutable_status() {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  return status_;
}
inline ::std::string* LoginRsp::release_status() {
  clear_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = status_;
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRsp::set_allocated_status(::std::string* status) {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (status) {
    set_has_status();
    status_ = status;
  } else {
    clear_has_status();
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::TransferMessage_Command>() {
  return ::rpc::TransferMessage_Command_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG
#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_2eproto__INCLUDED
